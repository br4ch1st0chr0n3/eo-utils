
EProgram. Program ::= License? Metas? Objects EOF ;

ELicense. License ::= ( COMMENT EOL)+ ;

EMetas. Metas ::= ( META EOL)+ ;

EObjects. Objects ::= ( Object EOL )+ ;

EObject. Object ::= ( COMMENT EOL)* ( Abstraction | Application ) Tail? ( EOL Method Htail? Suffix? Tail? )* ;

EAbstraction. Abstraction ::= Attributes ( ( Suffix ( SPACE SLASH ( NAME | QUESTION))?) | Htail )? ;

EAttributes. Attributes ::= LSQ ( Attribute ( SPACE Attribute)*)? RSQ ;

EAttribute. Attribute ::= Label ;

ELabel. Label ::= AT | NAME DOTS? ;

ETail. Tail ::= EOL ( Object EOL)+ ;

ESuffix. Suffix ::= SPACE ARROW SPACE Label CONST? ;

EMethod. Method ::= DOT ( NAME | RHO | AT | VERTEX ) ;

EApplication. Application ::= ( Head | LB Application RB ) Htail? Application1 ;

EApplication. Application1 ::= ( Method | Has | Suffix ) Application1 | '' ; 

EHtail. Htail ::= ( SPACE ( Head | Application ( Method | Has | Suffix ) | LB Application RB | Abstraction ) )+ ;

EHead. Head ::= DOTS? ( ROOT | AT | RHO | XI | SIGMA | STAR | NAME COPY? | NAME DOT | data ) ;

EHas. Has ::= COLON NAME ;

Edata. data ::= BYTES | BOOL | TEXT | STRING | INT | FLOAT | HEX | CHAR | REGEX ;

ECOMMENT. COMMENT ::= HASH Char*;
EMETA. META ::= PLUS NAME ( SPACE ~["\r\n"]+)?;

EREGEX. REGEX ::= SLASH ~[\r\n]+ SLASH [a-z]*;

EROOT. ROOT ::= 'Q';
ESTAR. STAR ::= '*';
EDOTS. DOTS ::= '...';
ECONST. CONST ::= '!';
ESLASH. SLASH ::= '/';
ECOLON. COLON ::= '::=';
ECOPY. COPY ::= '\'';
EARROW. ARROW ::= '>';
EVERTEX. VERTEX ::= '<';
ESIGMA. SIGMA ::= '&';
EXI. XI ::= '$';
EPLUS. PLUS ::= '+';
EMINUS. MINUS ::= '-';
EQUESTION. QUESTION ::= '?';
ESPACE. SPACE ::= ' ';
EDOT. DOT ::= '.';
ELSQ. LSQ ::= '[';
ERSQ. RSQ ::= ']';
ELB. LB ::= '(';
ERB. RB ::= ')';
EAT. AT ::= '@';
ERHO. RHO ::= '^';
EHASH. HASH ::= '#';

EINDENT. INDENT ::= SPACE SPACE ;
ELINEBREAK. LINEBREAK ::= ('\n' | '\r\n') ;
EEOL. EOL ::= LINEBREAK LINEBREAK? INDENT* ;

EBYTE. BYTE ::= [0-9A-F][0-9A-F];
EEMPTY_BYTES. EMPTY_BYTES ::= MINUS MINUS;
ELINE_BYTES. LINE_BYTES ::= BYTE ( MINUS BYTE)+;

EBYTES. BYTES ::= EMPTY_BYTES | BYTE MINUS | LINE_BYTES ( MINUS EOL LINE_BYTES)*;

EBOOL. BOOL ::= 'TRUE' | 'FALSE';
ECHAR. CHAR ::= '\'' (~['\\\r\n] | ESCAPE_SEQUENCE) '\'';
ESTRING. STRING ::= '"' (~["\\\r\n] | ESCAPE_SEQUENCE)* '"';

EESCAPE_SEQUENCE. ESCAPE_SEQUENCE ::= '\\' ["btnfr\"\'\\"] | '\\' ([0-3]? [0-7])? [0-7] | '\\' 'u'+ BYTE BYTE ;
EINT. INT ::= ( PLUS | MINUS)? [0-9]+;

EEXPONENT. EXPONENT ::= ('e'|'E') ( PLUS | MINUS)? ('0'..'9')+;
EFLOAT. FLOAT ::= ( PLUS | MINUS)? [0-9]+ DOT [0-9]+ EXPONENT?;
EHEX. HEX ::= '0x' [0-9a-f]+;

ENAME. NAME ::= [a-z][\p{Letter}\p{General_Category=Decimal_Number}_-]*;

ETEXT_MARK. TEXT_MARK ::= '"""';
ETEXT. TEXT ::= TEXT_MARK ('\n' | '\r\n') (~[\\] | ESCAPE_SEQUENCE)*? TEXT_MARK ;
