-- File generated by the BNF Converter (bnfc 2.9.4).

{-# LANGUAGE PatternSynonyms #-}

-- | The abstract syntax of language Sum.

module Sum.Abs where

import Prelude (Integer, String)
import qualified Prelude as C
  ( Eq, Ord, Show, Read
  , Int, Maybe(..)
  )

data Exp = EInt PIdent | EPlus Exp Integer
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype PIdent = PIdent ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

-- | Start position (line, column) of something.

type BNFC'Position = C.Maybe (C.Int, C.Int)

pattern BNFC'NoPosition :: BNFC'Position
pattern BNFC'NoPosition = C.Nothing

pattern BNFC'Position :: C.Int -> C.Int -> BNFC'Position
pattern BNFC'Position line col = C.Just (line, col)

-- | Get the start position of something.

class HasPosition a where
  hasPosition :: a -> BNFC'Position

instance HasPosition PIdent where
  hasPosition (PIdent (p, _)) = C.Just p

